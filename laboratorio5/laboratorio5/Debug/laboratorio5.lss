
laboratorio5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000438  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000467  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000475  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001250  00000000  00000000  00000535  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d4  00000000  00000000  00001785  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f4  00000000  00000000  00001f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  00002550  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000260  00000000  00000000  000026f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000350  00000350  00000424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.setup   00000022  000002f2  000002f2  000003c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_21 000000fa  000000ce  000000ce  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_14 0000007c  000001c8  000001c8  0000029c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.initADC 00000032  00000244  00000244  00000318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000024  000002ce  000002ce  000003a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.duty_cycle.1976 00000001  00800100  00800100  00000438  2**0
                  ALLOC
 20 .data.increasing.1977 00000001  00800101  00000362  00000436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .data.canal   00000001  00800102  00000363  00000437  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .bss.vADC     00000001  00800103  00800103  00000438  2**0
                  ALLOC
 23 .text.PWM0_Init 00000014  0000032a  0000032a  000003fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.PWM0_SetDutyCycle 00000004  00000354  00000354  00000428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.PWM1_init 00000032  00000276  00000276  0000034a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.PWM1_set_duty_cycle 0000000c  0000033e  0000033e  00000412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.PWM2_init 00000026  000002a8  000002a8  0000037c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.PWM2_set_duty_cycle 00000006  0000034a  0000034a  0000041e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_fini 00000002  0000035c  0000035c  00000430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_funcs_on_exit 00000002  0000035e  0000035e  00000432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_simulator_exit 00000002  00000360  00000360  00000434  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.exit    00000016  00000314  00000314  000003e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text._Exit   00000004  00000358  00000358  0000042c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
   8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
   c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  10:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  14:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  18:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  1c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  20:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  24:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  28:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  2c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  30:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  34:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  38:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_14>
  3c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  40:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  44:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  48:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  4c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  50:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <_etext>
  58:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  5c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  60:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  64:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 01       	movw	r16, r0
  6e:	01 01       	movw	r0, r2
  70:	03 00       	.word	0x0003	; ????
  72:	03 62       	ori	r16, 0x23	; 35
  74:	01 03       	mulsu	r16, r17
  76:	01 04       	cpc	r0, r1
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  c6:	0c 94 8a 01 	jmp	0x314	; 0x314 <exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

00000350 <__bad_interrupt>:
 350:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setup:

000002f2 <setup>:
volatile uint16_t pwm_counter = 0;
volatile uint16_t pwm_value = 0;

void setup() {

	DDRC &= ~((1 << DDC5)|(1 << DDC4)); // Configurar PC5 como entradas
 2f2:	87 b1       	in	r24, 0x07	; 7
 2f4:	8f 7c       	andi	r24, 0xCF	; 207
 2f6:	87 b9       	out	0x07, r24	; 7
	DDRD |=(1<<DDD6);
 2f8:	8a b1       	in	r24, 0x0a	; 10
 2fa:	80 64       	ori	r24, 0x40	; 64
 2fc:	8a b9       	out	0x0a, r24	; 10

	DDRB |= (1 << DDB1)|(1 << DDB3); //Configurar PB1(0C1A) y PB3(OC2A) como salidas
 2fe:	84 b1       	in	r24, 0x04	; 4
 300:	8a 60       	ori	r24, 0x0A	; 10
 302:	84 b9       	out	0x04, r24	; 4
	
	CLKPR = 0;
 304:	e1 e6       	ldi	r30, 0x61	; 97
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	10 82       	st	Z, r1
	CLKPR |= (1<<CLKPCE);
 30a:	80 81       	ld	r24, Z
 30c:	80 68       	ori	r24, 0x80	; 128
 30e:	80 83       	st	Z, r24

	sei(); // Habilitar interrupciones
 310:	78 94       	sei
 312:	08 95       	ret

Disassembly of section .text.__vector_21:

000000ce <__vector_21>:

void Timer0_Init() {
	TCCR0A |= (1 << WGM01);    // Modo de comparación CTC
	TCCR0B |= (1 << CS01);      // Prescaler de 8
	OCR0A = 195;              // Valor de comparación para obtener interrupción cada 1ms
	TIMSK0 |= (1 << OCIE0A);    // Habilitar interrupción por comparación A
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	80 83       	st	Z, r24
  fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <canal>
 102:	85 30       	cpi	r24, 0x05	; 5
 104:	b1 f0       	breq	.+44     	; 0x132 <__vector_21+0x64>
 106:	86 30       	cpi	r24, 0x06	; 6
 108:	31 f1       	breq	.+76     	; 0x156 <__vector_21+0x88>
 10a:	84 30       	cpi	r24, 0x04	; 4
 10c:	b1 f5       	brne	.+108    	; 0x17a <__vector_21+0xac>
 10e:	ec e7       	ldi	r30, 0x7C	; 124
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8b 7f       	andi	r24, 0xFB	; 251
 116:	80 83       	st	Z, r24
 118:	80 81       	ld	r24, Z
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	80 83       	st	Z, r24
 11e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 122:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <vADC>
 126:	0e 94 aa 01 	call	0x354	; 0x354 <PWM0_SetDutyCycle>
 12a:	85 e0       	ldi	r24, 0x05	; 5
 12c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <canal>
 130:	38 c0       	rjmp	.+112    	; 0x1a2 <__vector_21+0xd4>
 132:	ec e7       	ldi	r30, 0x7C	; 124
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	80 83       	st	Z, r24
 13c:	80 81       	ld	r24, Z
 13e:	85 60       	ori	r24, 0x05	; 5
 140:	80 83       	st	Z, r24
 142:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 146:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <vADC>
 14a:	0e 94 a5 01 	call	0x34a	; 0x34a <PWM2_set_duty_cycle>
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <canal>
 154:	26 c0       	rjmp	.+76     	; 0x1a2 <__vector_21+0xd4>
 156:	ec e7       	ldi	r30, 0x7C	; 124
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	80 7f       	andi	r24, 0xF0	; 240
 15e:	80 83       	st	Z, r24
 160:	80 81       	ld	r24, Z
 162:	86 60       	ori	r24, 0x06	; 6
 164:	80 83       	st	Z, r24
 166:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 16a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <vADC>
 16e:	0e 94 9f 01 	call	0x33e	; 0x33e <PWM1_set_duty_cycle>
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <canal>
 178:	14 c0       	rjmp	.+40     	; 0x1a2 <__vector_21+0xd4>
 17a:	ec e7       	ldi	r30, 0x7C	; 124
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	80 83       	st	Z, r24
 184:	80 81       	ld	r24, Z
 186:	86 60       	ori	r24, 0x06	; 6
 188:	80 83       	st	Z, r24
 18a:	c9 e7       	ldi	r28, 0x79	; 121
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	88 81       	ld	r24, Y
 190:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <vADC>
 194:	0e 94 9f 01 	call	0x33e	; 0x33e <PWM1_set_duty_cycle>
 198:	88 81       	ld	r24, Y
 19a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <vADC>
 19e:	0e 94 a5 01 	call	0x34a	; 0x34a <PWM2_set_duty_cycle>
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

Disassembly of section .text.__vector_14:

000001c8 <__vector_14>:
}

ISR(TIMER0_COMPA_vect) {
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	static uint8_t duty_cycle = 0;
	static uint8_t increasing = 1;

	// Incrementar o decrementar el ciclo de trabajo
	if (increasing) {
 1ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <increasing.1977>
 1ee:	88 23       	and	r24, r24
 1f0:	51 f0       	breq	.+20     	; 0x206 <__vector_14+0x3e>
		duty_cycle++;
 1f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (duty_cycle == 255) increasing = 0;
 1fc:	8f 3f       	cpi	r24, 0xFF	; 255
 1fe:	69 f4       	brne	.+26     	; 0x21a <__vector_14+0x52>
 200:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <increasing.1977>
 204:	0a c0       	rjmp	.+20     	; 0x21a <__vector_14+0x52>
		} else {
		duty_cycle--;
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20a:	81 50       	subi	r24, 0x01	; 1
 20c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (duty_cycle == 0) increasing = 1;
 210:	81 11       	cpse	r24, r1
 212:	03 c0       	rjmp	.+6      	; 0x21a <__vector_14+0x52>
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <increasing.1977>
	}

	// Actualizar el valor del PWM
	
	PWM0_SetDutyCycle(duty_cycle);
 21a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21e:	0e 94 aa 01 	call	0x354	; 0x354 <PWM0_SetDutyCycle>
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

Disassembly of section .text.initADC:

00000244 <initADC>:

void initADC(void){
	ADMUX = 0;
 244:	ec e7       	ldi	r30, 0x7C	; 124
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // referencia AVCC = 5V
 24a:	80 81       	ld	r24, Z
 24c:	80 64       	ori	r24, 0x40	; 64
 24e:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX2) | (1 << MUX1);// canal ADC6
 250:	80 81       	ld	r24, Z
 252:	86 60       	ori	r24, 0x06	; 6
 254:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);
 256:	80 81       	ld	r24, Z
 258:	80 62       	ori	r24, 0x20	; 32
 25a:	80 83       	st	Z, r24

	ADCSRA = 0;
 25c:	ea e7       	ldi	r30, 0x7A	; 122
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE); // habilitar interrupción del ADC
 262:	80 81       	ld	r24, Z
 264:	88 60       	ori	r24, 0x08	; 8
 266:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); // habilitar ADC
 268:	80 81       	ld	r24, Z
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // habilitación de prescaler
 26e:	80 81       	ld	r24, Z
 270:	87 60       	ori	r24, 0x07	; 7
 272:	80 83       	st	Z, r24
 274:	08 95       	ret

Disassembly of section .text.main:

000002ce <main>:
}

int main(void)
{
	cli();
 2ce:	f8 94       	cli
	setup();
 2d0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <setup>
	initADC();
 2d4:	0e 94 22 01 	call	0x244	; 0x244 <initADC>
	PWM1_init();
 2d8:	0e 94 3b 01 	call	0x276	; 0x276 <PWM1_init>
	PWM2_init();
 2dc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PWM2_init>
	PWM0_Init();
 2e0:	0e 94 95 01 	call	0x32a	; 0x32a <PWM0_Init>
	sei();
 2e4:	78 94       	sei

	while(1)
	{
		ADCSRA |= (1<<ADSC);
 2e6:	ea e7       	ldi	r30, 0x7A	; 122
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	80 83       	st	Z, r24
 2f0:	fa cf       	rjmp	.-12     	; 0x2e6 <main+0x18>

Disassembly of section .text.PWM0_Init:

0000032a <PWM0_Init>:
 *  Author: Nico
 */ 
#include "PWM0.h"

void PWM0_Init() {
	DDRD |= (1 << PD6);         // Configurar PD6 (OC0A) como salida
 32a:	8a b1       	in	r24, 0x0a	; 10
 32c:	80 64       	ori	r24, 0x40	; 64
 32e:	8a b9       	out	0x0a, r24	; 10

	// Configuración del Timer0 para PWM
	TCCR0A |= (1 << COM0A1) | (1 << WGM00) | (1 << WGM01); // Modo PWM rápido, no inversor
 330:	84 b5       	in	r24, 0x24	; 36
 332:	83 68       	ori	r24, 0x83	; 131
 334:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00);      // Sin prescaler
 336:	85 b5       	in	r24, 0x25	; 37
 338:	81 60       	ori	r24, 0x01	; 1
 33a:	85 bd       	out	0x25, r24	; 37
 33c:	08 95       	ret

Disassembly of section .text.PWM0_SetDutyCycle:

00000354 <PWM0_SetDutyCycle>:
}

void PWM0_SetDutyCycle(uint8_t duty_cycle) {
	OCR0A = duty_cycle;
 354:	87 bd       	out	0x27, r24	; 39
 356:	08 95       	ret

Disassembly of section .text.PWM1_init:

00000276 <PWM1_init>:
 */ 
#include "PWM1.h"

void PWM1_init() {
	// Configuración del modo de funcionamiento PWM1 (Fast PWM, non-inverted mode)
	TCCR1A = 0;
 276:	e0 e8       	ldi	r30, 0x80	; 128
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	10 82       	st	Z, r1
	TCCR1B = 0;
 27c:	a1 e8       	ldi	r26, 0x81	; 129
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	1c 92       	st	X, r1
	TCCR1A |=(1 << COM1A1); // Configura el modo de PWM y habilita la salida no invertida en OC1A (PB1)
 282:	80 81       	ld	r24, Z
 284:	80 68       	ori	r24, 0x80	; 128
 286:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM12)|(1<<WGM11);
 288:	80 81       	ld	r24, Z
 28a:	8a 60       	ori	r24, 0x0A	; 10
 28c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(1<<CS12);
 28e:	8c 91       	ld	r24, X
 290:	84 61       	ori	r24, 0x14	; 20
 292:	8c 93       	st	X, r24

	DDRB |= (1 << DDB1);// Configuración del pin PB1 (OC1A) como salida
 294:	84 b1       	in	r24, 0x04	; 4
 296:	82 60       	ori	r24, 0x02	; 2
 298:	84 b9       	out	0x04, r24	; 4

	ICR1 = 0x9B;
 29a:	8b e9       	ldi	r24, 0x9B	; 155
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 2a6:	08 95       	ret

Disassembly of section .text.PWM1_set_duty_cycle:

0000033e <PWM1_set_duty_cycle>:
}

void PWM1_set_duty_cycle(uint8_t duty_cycle) {
	// Se establece el ciclo de trabajo (OCR1A) del PWM1
	OCR1A = duty_cycle;
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 344:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 348:	08 95       	ret

Disassembly of section .text.PWM2_init:

000002a8 <PWM2_init>:
 */ 
#include "PWM2.h"

void PWM2_init() {
	// Configuración del modo de funcionamiento PWM1 (Fast PWM, non-inverted mode)
	TCCR2A = 0;
 2a8:	e0 eb       	ldi	r30, 0xB0	; 176
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	10 82       	st	Z, r1
	TCCR2B = 0;
 2ae:	a1 eb       	ldi	r26, 0xB1	; 177
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	1c 92       	st	X, r1
	TCCR2A |=(1 << COM2A1); // Configura el modo de PWM y habilita la salida no invertida en OC2A (PB3)
 2b4:	80 81       	ld	r24, Z
 2b6:	80 68       	ori	r24, 0x80	; 128
 2b8:	80 83       	st	Z, r24
	TCCR2A |= (1<<WGM21)|(1<<WGM20); //configuracion Fast PWM
 2ba:	80 81       	ld	r24, Z
 2bc:	83 60       	ori	r24, 0x03	; 3
 2be:	80 83       	st	Z, r24
	TCCR2B |=(1<<CS22)|(1<<CS21)|(1<<CS20);
 2c0:	8c 91       	ld	r24, X
 2c2:	87 60       	ori	r24, 0x07	; 7
 2c4:	8c 93       	st	X, r24
	// Configuración del pin PB3 (OC2A) como salida
	DDRB |= (1 << DDB3);
 2c6:	84 b1       	in	r24, 0x04	; 4
 2c8:	88 60       	ori	r24, 0x08	; 8
 2ca:	84 b9       	out	0x04, r24	; 4
 2cc:	08 95       	ret

Disassembly of section .text.PWM2_set_duty_cycle:

0000034a <PWM2_set_duty_cycle>:
}

void PWM2_set_duty_cycle(uint8_t duty_cycle) {
	// Se establece el ciclo de trabajo (OCR1A) del PWM1
	OCR2A = duty_cycle;
 34a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 34e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000035c <_fini>:
 35c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000035e <__funcs_on_exit>:
 35e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000360 <__simulator_exit>:
 360:	08 95       	ret

Disassembly of section .text.exit:

00000314 <exit>:
 314:	ec 01       	movw	r28, r24
 316:	0e 94 af 01 	call	0x35e	; 0x35e <__funcs_on_exit>
 31a:	0e 94 ae 01 	call	0x35c	; 0x35c <_fini>
 31e:	ce 01       	movw	r24, r28
 320:	0e 94 b0 01 	call	0x360	; 0x360 <__simulator_exit>
 324:	ce 01       	movw	r24, r28
 326:	0e 94 ac 01 	call	0x358	; 0x358 <_Exit>

Disassembly of section .text._Exit:

00000358 <_Exit>:
 358:	0e 94 65 00 	call	0xca	; 0xca <_exit>
